{"ast":null,"code":"var _jsxFileName = \"/Users/mwitmacmini2/Desktop/WebOpenAi/frontend/src/component/Header.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Input } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nconst {\n  TextArea\n} = Input;\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst mic = new SpeechRecognition();\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = 'th-Th';\nconst configuration = new Configuration({\n  apiKey: \"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\"\n});\nconst openai = new OpenAIApi(configuration);\nconst Header = () => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [note, setNote] = useState('');\n  const [text, setText] = useState('');\n  useEffect(() => {\n    mic.onstart = () => {\n      console.log('Speech recognition started');\n    };\n    mic.onresult = e => {\n      const transcript = Array.from(e.results).map(result => result[0]).map(result => result.transcript).join('');\n      setText(transcript);\n    };\n    mic.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n    };\n    mic.onStop = () => {\n      console.log('Speech recognition stopped');\n    };\n    mic.onresult = e => {\n      const handleInputChange = async e => {\n        var _response$data$choice;\n        setText(e.target.value);\n        const question = e.target.value;\n        const response = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: `q: ${question}\\n a: `,\n          temperature: 0,\n          max_tokens: 100,\n          top_p: 1,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0,\n          stop: [\"\\n\"]\n        });\n        setNote((_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : _response$data$choice[0].text);\n      };\n    };\n  }, []);\n  const startListening = () => {\n    setIsListening(true);\n    mic.start();\n  };\n  const stopListening = () => {\n    setIsListening(false);\n    mic.stop();\n  };\n\n  // const handleInputChange = async e => {\n  //     setText(e.target.value);\n  //     const question = e.target.value;\n  //     const response = await openai.createCompletion({\n  //         model: \"text-davinci-003\",\n  //         prompt: `q: ${question}\\n a: `,\n  //         temperature: 0,\n  //         max_tokens: 100,\n  //         top_p: 1,\n  //         frequency_penalty: 0.0,\n  //         presence_penalty: 0.0,\n  //         stop: [\"\\n\"],\n  //     });\n  //     setNote(response.data.choices?.[0].text);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: startListening,\n        disabled: isListening,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: stopListening,\n        disabled: !isListening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      id: \"inputText\",\n      onChange: handleInputChange,\n      placeholder: \"Questions\",\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n      id: \"outputText\",\n      placeholder: \"Answers\",\n      value: note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Header, \"+s/3aWrYAHzDZL6itZz21rPQs7E=\");\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useEffect","useState","Button","Input","jsxDEV","_jsxDEV","Fragment","_Fragment","Configuration","OpenAIApi","require","TextArea","SpeechRecognition","window","webkitSpeechRecognition","mic","continuous","interimResults","lang","configuration","apiKey","openai","Header","_s","isListening","setIsListening","note","setNote","text","setText","onstart","console","log","onresult","e","transcript","Array","from","results","map","result","join","onerror","event","error","onStop","handleInputChange","_response$data$choice","target","value","question","response","createCompletion","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","stop","data","choices","startListening","start","stopListening","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","type","id","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/mwitmacmini2/Desktop/WebOpenAi/frontend/src/component/Header.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Input } from 'antd';\nconst { Configuration, OpenAIApi } = require(\"openai\");\n\nconst { TextArea } = Input;\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst mic = new SpeechRecognition();\n\nmic.continuous = true;\nmic.interimResults = true;\nmic.lang = 'th-Th';\n\nconst configuration = new Configuration({\n    apiKey: \"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\",\n});\nconst openai = new OpenAIApi(configuration);\n\nconst Header = () => {\n    const [isListening, setIsListening] = useState(false);\n    const [note, setNote] = useState('');\n    const [text, setText] = useState('');\n\n    useEffect(() => {\n        mic.onstart = () => {\n            console.log('Speech recognition started');\n        };\n\n        mic.onresult = e => {\n            const transcript = Array.from(e.results)\n                .map(result => result[0])\n                .map(result => result.transcript)\n                .join('');\n            setText(transcript);\n        };\n\n        mic.onerror = event => {\n            console.error('Speech recognition error:', event.error);\n        };\n\n        mic.onStop = () => {\n            console.log('Speech recognition stopped');\n        }\n\n        mic.onresult = e => {\n            const handleInputChange = async e => {\n                setText(e.target.value);\n                const question = e.target.value;\n                const response = await openai.createCompletion({\n                    model: \"text-davinci-003\",\n                    prompt: `q: ${question}\\n a: `,\n                    temperature: 0,\n                    max_tokens: 100,\n                    top_p: 1,\n                    frequency_penalty: 0.0,\n                    presence_penalty: 0.0,\n                    stop: [\"\\n\"],\n                });\n                setNote(response.data.choices?.[0].text);\n            }\n        }\n    }, []);\n\n    const startListening = () => {\n        setIsListening(true);\n        mic.start();\n    };\n\n    const stopListening = () => {\n        setIsListening(false);\n        mic.stop();\n    };\n\n    // const handleInputChange = async e => {\n    //     setText(e.target.value);\n    //     const question = e.target.value;\n    //     const response = await openai.createCompletion({\n    //         model: \"text-davinci-003\",\n    //         prompt: `q: ${question}\\n a: `,\n    //         temperature: 0,\n    //         max_tokens: 100,\n    //         top_p: 1,\n    //         frequency_penalty: 0.0,\n    //         presence_penalty: 0.0,\n    //         stop: [\"\\n\"],\n    //     });\n    //     setNote(response.data.choices?.[0].text);\n    // };\n\n    return (\n        <>\n            <br /><br />\n            <div>\n                <Button onClick={startListening} disabled={isListening}>\n                    Start Listening\n                </Button>\n                <Button onClick={stopListening} disabled={!isListening}>\n                    Stop Listening\n                </Button>\n            </div>\n            <br /><br />\n            <Input type=\"text\" id=\"inputText\" onChange={handleInputChange} placeholder=\"Questions\" value={text} />\n            <br /><br />\n            <TextArea id=\"outputText\" placeholder=\"Answers\" value={note} />\n        </>\n    );\n};\n\nexport default Header;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}